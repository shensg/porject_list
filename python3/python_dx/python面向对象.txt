
# 面向对象
# 有意义的面向对象的代码
# 类 = 面向对象
# 类、对象
# 实例化
# 类最基本的作用：封装代码
# 类只负责封装代码，不负责执行代码
# 类可以理解为一个模板
class Start():
    name = ''
    age = 0
    # 行为（方法） 与 特征

    def print_file(self):
        print('name:' + self.name)
        print('age:' + str(self.age))

# 方法 和 函数的区别
# 方法：设计层面   函数：程序运行、过程式的一种称谓

# start = Start()
# start.print_file()

类下面的变量：数据成员


类和对象的关系：通过实例化关联在一起的

python类的定义：
类是现实世界或思维世界中的实体在计算机中的反映
它将数据以及这些数据上的操作封装在一起


python类：
    变量：类变量   实例变量



    方法：实例方法
class Start():
    sum = 0
    # name = 'hello'
    # age = 0
    # 实例方法: 定义传参数时 'self' 必须出现，调用时不需要出现 'self'
    def __init__(self, name, age):    #构造函数  __int__是双下滑线 '_'
        # 构造函数
        # self 关键字是初始化对象的属性
        self.name = name
        self.age = age
        # print(self.name)
        print(self.__class__.sum)
        # print(self.__dict__)
        # print(sum)
        # print(age)
        # print(name)
    
    # 行为 和 特征
    # self代表的是实例，是对象
    # 实例方法
    def do_homework(self):    #普通函数
        print('homework')

start1 = Start('蓝色', 18)
print(start1.sum)
# start1.do_homework
# start2 = Start('红色', 16)
# print(start2.name)    



    类方法

class Start():
    sum = 0
    # name = 'hello'
    # age = 0
    # 实例方法: 定义传参数时 'self' 必须出现，调用时不需要出现 'self'
    def __init__(self, name, age):    #构造函数  __int__是双下滑线 '_'
        # 构造函数
        # self 关键字是初始化对象的属性
        self.name = name
        self.age = age
        self.__class__.sum += 1
        # print('当前人数为:' + str(self.__class__.sum))
        # print(self.name)
        # print(self.__class__.sum)
        # __dict__
        # print(start)

    
    # 行为 和 特征
    # self代表的是实例，是对象
    # 实例方法
    def do_homework(self):    #普通函数
        print('homework')
    

    @classmethod
    def plus_sum(cls):
        cls.sum += 1
        print(cls.sum)


start1 = Start('红色', 18)
start1.plus_sum()
# Start.plus_sum()
# start2 = Start('黑色', 16)
# Start.plus_sum()
# start3 = Start('蓝色', 15)
# Start.plus_sum()

    
    静态方法
class Start():
    sum = 0
    # name = 'hello'
    # age = 0
    # 实例方法: 定义传参数时 'self' 必须出现，调用时不需要出现 'self'
    def __init__(self, name, age):    #构造函数  __int__是双下滑线 '_'
        # 构造函数
        # self 关键字是初始化对象的属性
        self.name = name
        self.age = age
        self.__class__.sum += 1
        # print('当前人数为:' + str(self.__class__.sum)

    
    # 行为 和 特征
    # self代表的是实例，是对象
    # 实例方法
    def do_homework(self):    #普通函数
        print('homework')
    

    @classmethod
    def plus_sum(cls):
        cls.sum += 1
        print(cls.sum)
    
    @staticmethod
    def add(x,y):
        print(Start.sum)
        # print(name)
        print('This is static method')


start1 = Start('蓝色',15)
start1.add(1,2)
Start.add(2,3)


    构造函数

    成员可见性



    面向对象3大特性：
        继承性
	封装性
	多态性





















